# Ref: https://www.docker.com/blog/docker-v2-github-action-is-now-ga/
name: CI/CD

on:
  push:
    branches:
      - main
  # TODO: se pudermos provisionar mais mÃ¡quinas, isso aqui faz sentido
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      app_image_version:
        description: 'Version of the application image'
        required: false
        default: 'latest'

jobs:
  test-unit:
    # Garante que o build seja executado apenas quando houver um merge na branch main
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    container: maven:3.8.1-openjdk-17-slim

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run the Maven verify phase
        run: mvn --batch-mode --update-snapshots verify

  build-docker-image:
    needs: test-unit
    runs-on: ubuntu-latest

    env:
      BUILD_VERSION: ${{ github.event.inputs.app_image_version || github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load environment variables
        uses: thaind0/envfile@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          # build-args: |
          #   APPLICATION_VERSION=${{ env.BUILD_VERSION }}
          platforms: linux/amd64
          push: true
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:cache,mode=max
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ env.BUILD_VERSION }}

  apply-new-version:
    runs-on: ubuntu-latest
    needs: build-docker-image

    env:
      IMAGE_VERSION: ${{ github.event.inputs.app_image_version || github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Clone Terraform Config Repository
        run: git clone https://github.com/ALFAC-Org/food-cloud-infra.git

      - name: Load environment variables
        uses: thaind0/envfile@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          override: false # prevent overriding IMAGE_VERSION -> don't create the env variables
          file: food-cloud-infra/.env

      - name: Get RDS endpoint
        run: |
          DB_HOST=$(aws rds describe-db-instances --db-instance-identifier ${{ secrets.DB_IDENTIFIER }} --query "DBInstances[0].Endpoint.Address" --output text)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

      - name: Overwrite .env variable
        run: |
          echo "IMAGE_VERSION=${{ env.IMAGE_VERSION }}" >> .env
          echo "ENABLE_FLYWAY=true" >> .env
          echo "DB_HOST=${{ env.DB_HOST }}" >> .env
        working-directory: food-cloud-infra

      - name: Check if .env.DB_HOST was set
        run: |
          if [ -z "${{ env.DB_HOST }}" ]; then
            echo "DB_HOST is not set. Skipping remaining steps."
            exit 1
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init  -reconfigure -backend-config="bucket=${{ secrets.AWS_BUCKET_NAME }}" -backend-config="key=terraform.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}"
        working-directory: food-cloud-infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: food-cloud-infra

      - name: Terraform Plan
        run: bash terraform.sh plan
        working-directory: food-cloud-infra

      - name: Terraform Apply
        run: bash terraform.sh apply -auto-approve
        working-directory: food-cloud-infra
